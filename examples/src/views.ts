// Generated by VeGen. Do not edit.

function h<K extends keyof HTMLElementTagNameMap>(
  tag: K,
  props: Partial<HTMLElementTagNameMap[K]> = {},
  children: Node[] = [],
  dataset: Record<string, string> = {}
): HTMLElementTagNameMap[K] {
  const element = document.createElement(tag);
  Object.assign(element, props);
  Object.assign(element.dataset, dataset);
  element.append(...children);
  return element;
}
const t = (s: string) => document.createTextNode(s);

// Builtin functions
function numberToString(value: number): string {
  return value.toString();
}
function boolean<T>(value: boolean, t: T, f: T): T {
  return value ? t : f;
}
function lookup<V>(m: { [k: string]: V }, k: string, d: V) {
  return m[k] ?? d;
}

type ViewState<Input> = {
  root: any;
  update: (input: Input) => void;
};
type View<Input> = (input: Input) => ViewState<Input>;
function updateForLoop<Input>({
  anchor,
  prevStates,
  nextInputs,
  subView,
}: {
  anchor: Comment;
  prevStates: ViewState<Input>[];
  nextInputs: Input[];
  subView: View<Input>;
}) {
  const parent = anchor.parentNode!;
  let states = prevStates.slice();

  // Remove extra items (from end, working backwards)
  while (states.length > nextInputs.length) {
    const removed = states.pop()!;
    parent.removeChild(removed.root);
  }

  // Update existing items
  for (let i = 0; i < Math.min(states.length, nextInputs.length); i++) {
    states[i].update(nextInputs[i]);
  }

  // Add new items (insert before anchor)
  for (let i = states.length; i < nextInputs.length; i++) {
    const state = subView(nextInputs[i]);
    parent.insertBefore(state.root, anchor);
    states.push(state);
  }

  return states;
}
export function run<Input>(
  view: View<Input>,
  buildComponent: (
    update: (stateUpdater: (current: Input) => Input) => void
  ) => Input
): Element {
  let state: ViewState<Input>;
  let currentInput: Input;

  const update = (stateUpdater: (current: Input) => Input) => {
    currentInput = stateUpdater(currentInput);
    state.update(currentInput);
  };

  // Build the initial input and state
  currentInput = buildComponent(update);
  state = view(currentInput);

  return state.root;
}
export type CartInput = { cart: { getItems: (v0: any, v1: any) => { lineTotal: any, name: string, qty: number }[], grandTotal: (v0: any, v1: any) => any, items: any, subtotal: (v0: any, v1: any) => any, totalQty: (v0: any) => number }, categories: any, currency: (v0: any) => string };
export function Cart(input: CartInput): ViewState<CartInput> {
  const child0: View<any> = (input) => {
    const node0 = t(input.ci.name);
    const node1 = t(numberToString(input.ci.qty));
    const node2 = t(input.currency(input.ci.lineTotal));
    const node3 = h("div", {"className": "flex justify-between py-1 px-0.5 border-b border-dashed border-gray-300 text-sm"}, [node0, t(" × "), node1, t(" — "), node2], {"testid": `item-${input.ci.name}`});
    const root = node3;
    let currentInput = input;
    return {
      root,
      update(input) {
        if (input.ci.lineTotal !== currentInput.ci.lineTotal || input.currency !== currentInput.currency) {
          node2.textContent = input.currency(input.ci.lineTotal);
        }
        if (input.ci.name !== currentInput.ci.name) {
          node0.textContent = input.ci.name;
          node3.dataset["testid"] = `item-${input.ci.name}`;
        }
        if (input.ci.qty !== currentInput.ci.qty) {
          node1.textContent = numberToString(input.ci.qty);
        }
        currentInput = input;
      }
    };
  };
  const anchor0 = document.createComment("for-loop-0");
  const loopElements0 = [];
  let childState0: any[] = [];
  for (const item of input.cart.getItems(input.categories, input.cart.items)) {
    const itemState = child0({ ...input, ci: item });
    loopElements0.push(itemState.root);
    childState0.push(itemState);
  }
  loopElements0.push(anchor0);
  const node0 = t(numberToString(input.cart.totalQty(input.cart.items)));
  const node1 = t(input.currency(input.cart.subtotal(input.categories, input.cart.items)));
  const node2 = t(input.currency(input.cart.grandTotal(input.categories, input.cart.items)));
  const root = h("div", {"className": "bg-white rounded-lg p-3 my-2 shadow-md"}, [h("h2", {"className": "text-xl font-semibold mb-4 text-blue-900"}, [t("Cart")]), h("div", {"className": "flex flex-col gap-3"}, [...loopElements0], {"testid": "cart-items"}), h("div", {"className": "grid gap-1 items-baseline py-4 px-4 bg-gray-200 rounded-md mt-3"}, [h("div", {"className": "text-gray-700"}, [t("Items")]), h("div", {"className": "text-right font-semibold tabular-nums"}, [node0], {"testid": "total-qty"}), h("div", {"className": "text-gray-700"}, [t("Subtotal")]), h("div", {"className": "text-right font-semibold tabular-nums"}, [node1], {"testid": "subtotal-amount"})]), h("div", {"className": "bg-blue-100 rounded-md p-3 mt-3 text-center font-bold text-blue-900"}, [t("Grand Total: "), node2], {"testid": "grand-total"})], {"testid": "cart-section"});
  let currentInput = input;
  return {
    root,
    update(input) {
      if (input.cart.grandTotal !== currentInput.cart.grandTotal || input.cart.items !== currentInput.cart.items || input.categories !== currentInput.categories || input.currency !== currentInput.currency) {
        node2.textContent = input.currency(input.cart.grandTotal(input.categories, input.cart.items));
      }
      if (input.cart.items !== currentInput.cart.items || input.cart.subtotal !== currentInput.cart.subtotal || input.categories !== currentInput.categories || input.currency !== currentInput.currency) {
        node1.textContent = input.currency(input.cart.subtotal(input.categories, input.cart.items));
      }
      if (input.cart.items !== currentInput.cart.items || input.cart.totalQty !== currentInput.cart.totalQty) {
        node0.textContent = numberToString(input.cart.totalQty(input.cart.items));
      }
      childState0 = updateForLoop({
        anchor: anchor0,
        prevStates: childState0,
        nextInputs: input.cart.getItems(input.categories, input.cart.items).map((ci: any) => ({ ...input, ci })),
        subView: child0
      });
      currentInput = input;
    }
  };
}
export type MenuInput = { cart: { decrement: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any, increment: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any, items: any }, categories: { items: { id: string, name: string, price: any }[], name: string }[], currency: (v0: any) => string };
export function Menu(input: MenuInput): ViewState<MenuInput> {
  const child0: View<any> = (input) => {
    const child0: View<any> = (input) => {
      const node0 = t(input.item.name);
      const node1 = t(input.currency(input.item.price));
      const node2 = h("button", {"className": "w-10 py-2", "onclick": input.cart.increment(input.item.id), "title": "Add"}, [t("+")], {"testid": `add-${input.item.name}`});
      const node3 = h("button", {"className": "w-10 py-2", "onclick": input.cart.decrement(input.item.id), "title": "Remove"}, [t("-")], {"testid": `remove-${input.item.name}`});
      const node4 = t(numberToString(lookup(input.cart.items, input.item.id, 0)));
      const root = h("div", {"className": "bg-white rounded-md p-3 transition-all duration-200 hover:shadow-lg hover:-translate-y-0.5 shadow-sm"}, [h("div", {"className": "flex flex-col gap-3"}, [h("div", {"className": "flex items-center justify-between gap-2"}, [h("div", {"className": "font-semibold"}, [node0]), h("div", {"className": "bg-blue-600 text-white rounded-full px-2 py-1 text-xs font-semibold"}, [node1])]), h("div", {"className": "flex items-center justify-between gap-2"}, [h("div", {"className": "text-center"}, [node2, node3]), h("div", {"className": "bg-gray-50 border border-dashed border-gray-300 rounded-full px-2 py-1 font-semibold text-sm flex items-center"}, [t("Qty: "), node4])])])]);
      let currentInput = input;
      return {
        root,
        update(input) {
          if (input.cart.decrement !== currentInput.cart.decrement || input.item.id !== currentInput.item.id) {
            node3["onclick"] = input.cart.decrement(input.item.id);
          }
          if (input.cart.increment !== currentInput.cart.increment || input.item.id !== currentInput.item.id) {
            node2["onclick"] = input.cart.increment(input.item.id);
          }
          if (input.cart.items !== currentInput.cart.items || input.item.id !== currentInput.item.id) {
            node4.textContent = numberToString(lookup(input.cart.items, input.item.id, 0));
          }
          if (input.currency !== currentInput.currency || input.item.price !== currentInput.item.price) {
            node1.textContent = input.currency(input.item.price);
          }
          if (input.item.name !== currentInput.item.name) {
            node0.textContent = input.item.name;
            node2.dataset["testid"] = `add-${input.item.name}`;
            node3.dataset["testid"] = `remove-${input.item.name}`;
          }
          currentInput = input;
        }
      };
    };
    const anchor0 = document.createComment("for-loop-0");
    const loopElements0 = [];
    let childState0: any[] = [];
    for (const item of input.cat.items) {
      const itemState = child0({ ...input, item: item });
      loopElements0.push(itemState.root);
      childState0.push(itemState);
    }
    loopElements0.push(anchor0);
    const node0 = t(input.cat.name);
    const root = h("div", {"className": "bg-gray-50 rounded-md p-3 border-l-4 border-blue-600"}, [h("h3", {"className": "text-lg font-medium mb-3 mt-0"}, [node0]), h("div", {"className": "flex flex-col gap-3"}, [...loopElements0])]);
    let currentInput = input;
    return {
      root,
      update(input) {
        if (input.cat.name !== currentInput.cat.name) {
          node0.textContent = input.cat.name;
        }
        childState0 = updateForLoop({
          anchor: anchor0,
          prevStates: childState0,
          nextInputs: input.cat.items.map((item: any) => ({ ...input, item })),
          subView: child0
        });
        currentInput = input;
      }
    };
  };
  const anchor0 = document.createComment("for-loop-0");
  const loopElements0 = [];
  let childState0: any[] = [];
  for (const item of input.categories) {
    const itemState = child0({ ...input, cat: item });
    loopElements0.push(itemState.root);
    childState0.push(itemState);
  }
  loopElements0.push(anchor0);
  const root = h("div", {"className": "rounded-lg p-4 shadow-md"}, [h("h2", {"className": "text-xl font-semibold mb-4 text-blue-900"}, [t("Menu")]), h("div", {"className": "flex flex-col gap-3"}, [...loopElements0])], {"testid": "menu-section"});
  let currentInput = input;
  return {
    root,
    update(input) {
      childState0 = updateForLoop({
        anchor: anchor0,
        prevStates: childState0,
        nextInputs: input.categories.map((cat: any) => ({ ...input, cat })),
        subView: child0
      });
      currentInput = input;
    }
  };
}
export type OrderInput = { order: { details: { address: string, type: "delivery" } | { table: string, type: "dinein" } | { type: "pickup" }, selectOrder: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any, updateAddress: (this: GlobalEventHandlers, ev: Event) => any, updateTable: (this: GlobalEventHandlers, ev: Event) => any } };
export function Order(input: OrderInput): ViewState<OrderInput> {
  const child0: View<any> = (input) => {
    const root = t("\n      ");
    let currentInput = input;
    return {
      root,
      update(input) {
        currentInput = input;
      }
    };
  };
  const child1: View<any> = (input) => {
    const node0 = h("input", {"className": "border border-gray-300 rounded-md px-3 py-2 w-full", "oninput": input.order.updateTable, "placeholder": "Table Number", "value": input.dinein.table}, [], {"testid": "table-input"});
    const root = h("div", {"className": "mb-4"}, [node0]);
    let currentInput = input;
    return {
      root,
      update(input) {
        if (input.dinein.table !== currentInput.dinein.table) {
          node0["value"] = input.dinein.table;
        }
        if (input.order.updateTable !== currentInput.order.updateTable) {
          node0["oninput"] = input.order.updateTable;
        }
        currentInput = input;
      }
    };
  };
  const child2: View<any> = (input) => {
    const node0 = h("input", {"className": "border border-gray-300 rounded-md px-3 py-2 w-full", "oninput": input.order.updateAddress, "placeholder": "Delivery Address", "value": input.delivery.address}, [], {"testid": "address-input"});
    const root = h("div", {"className": "mb-4"}, [node0]);
    let currentInput = input;
    return {
      root,
      update(input) {
        if (input.delivery.address !== currentInput.delivery.address) {
          node0["value"] = input.delivery.address;
        }
        if (input.order.updateAddress !== currentInput.order.updateAddress) {
          node0["oninput"] = input.order.updateAddress;
        }
        currentInput = input;
      }
    };
  };
  let currentSwitchState0: ViewState<any>;
  const switchElement0 = (() => {
    const onValue = input.order.details.type;
    switch (onValue) {
      case "pickup": {
        const caseInput = { ...input, pickup: input.order.details };
        const st = child0(caseInput);
        currentSwitchState0 = st;
        return st.root;
      }
      case "dinein": {
        const caseInput = { ...input, dinein: input.order.details };
        const st = child1(caseInput);
        currentSwitchState0 = st;
        return st.root;
      }
      case "delivery": {
        const caseInput = { ...input, delivery: input.order.details };
        const st = child2(caseInput);
        currentSwitchState0 = st;
        return st.root;
      }
      default: {
        const st = { root: document.createComment("switch-empty"), update: (_: any) => {} };
        currentSwitchState0 = st;
        return st.root;
      }
    }
  })();
  const node0 = h("button", {"className": "px-2 py-2", "onclick": input.order.selectOrder(`pickup`)}, [t("Pick Up")], {"testid": "pickup-btn"});
  const node1 = h("button", {"className": "px-2 py-2", "onclick": input.order.selectOrder(`dinein`)}, [t("Dine In")], {"testid": "dinein-btn"});
  const node2 = h("button", {"className": "px-2 py-2", "onclick": input.order.selectOrder(`delivery`)}, [t("Delivery")], {"testid": "delivery-btn"});
  const root = h("div", {"className": "bg-white rounded-lg p-4 my-3 shadow-md"}, [h("h2", {"className": "text-xl font-semibold mb-4 text-blue-900"}, [t("Order")]), h("div", {"className": "mb-4 flex gap-1"}, [node0, node1, node2]), switchElement0]);
  let currentInput = input;
  return {
    root,
    update(input) {
      if (input.order.selectOrder !== currentInput.order.selectOrder) {
        node0["onclick"] = input.order.selectOrder(`pickup`);
        node1["onclick"] = input.order.selectOrder(`dinein`);
        node2["onclick"] = input.order.selectOrder(`delivery`);
      }
      const newOnValue0 = input.order.details.type;
      const prevOnValue0 = currentInput.order.details.type;
      if (newOnValue0 !== prevOnValue0) {
        let newState0: ViewState<any>;
        let newRoot0: any;
        switch (newOnValue0) {
          case "pickup": {
            const caseInput = { ...input, pickup: input.order.details };
            newState0 = child0(caseInput);
            newRoot0 = newState0.root;
            break;
          }
          case "dinein": {
            const caseInput = { ...input, dinein: input.order.details };
            newState0 = child1(caseInput);
            newRoot0 = newState0.root;
            break;
          }
          case "delivery": {
            const caseInput = { ...input, delivery: input.order.details };
            newState0 = child2(caseInput);
            newRoot0 = newState0.root;
            break;
          }
          default: {
            newState0 = { root: document.createComment("switch-empty"), update: (_: any) => {} };
            newRoot0 = newState0.root;
          }
        }
        currentSwitchState0.root.replaceWith(newRoot0);
        currentSwitchState0 = newState0;
      } else {
        switch (newOnValue0) {
          case "pickup": {
            const caseInput = { ...input, pickup: input.order.details };
            currentSwitchState0.update(caseInput);
            break;
          }
          case "dinein": {
            const caseInput = { ...input, dinein: input.order.details };
            currentSwitchState0.update(caseInput);
            break;
          }
          case "delivery": {
            const caseInput = { ...input, delivery: input.order.details };
            currentSwitchState0.update(caseInput);
            break;
          }
          default: {
            // no-op
          }
        }
      }
      currentInput = input;
    }
  };
}
export type CafeInput = { cart: { decrement: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any, getItems: (v0: { items: { id: string, name: string, price: any }[], name: string }[], v1: any) => { lineTotal: any, name: string, qty: number }[], grandTotal: (v0: { items: { id: string, name: string, price: any }[], name: string }[], v1: any) => any, increment: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any, items: any, subtotal: (v0: { items: { id: string, name: string, price: any }[], name: string }[], v1: any) => any, totalQty: (v0: any) => number }, categories: { items: { id: string, name: string, price: any }[], name: string }[], currency: (v0: any) => string, order: { details: { address: string, type: "delivery" } | { table: string, type: "dinein" } | { type: "pickup" }, selectOrder: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any, updateAddress: (this: GlobalEventHandlers, ev: Event) => any, updateTable: (this: GlobalEventHandlers, ev: Event) => any } };
export function Cafe(input: CafeInput): ViewState<CafeInput> {
  const componentState0 = Menu({"cart": input.cart, "categories": input.categories, "currency": input.currency});
  const componentElement0 = componentState0.root;
  const componentState1 = Order({"order": input.order});
  const componentElement1 = componentState1.root;
  const componentState2 = Cart({"cart": input.cart, "categories": input.categories, "currency": input.currency});
  const componentElement2 = componentState2.root;
  const root = h("div", {}, [h("h1", {"className": "p-4"}, [t("Cafe Example")]), h("div", {"className": "flex gap-4 p-4"}, [h("div", {"className": "grow"}, [componentElement0]), h("div", {"className": "flex flex-col gap-4"}, [h("div", {}, [componentElement1]), h("div", {}, [componentElement2])])])], {"testid": "cafe-app"});
  let currentInput = input;
  return {
    root,
    update(input) {
      componentState0.update({"cart": input.cart, "categories": input.categories, "currency": input.currency});
      componentState1.update({"order": input.order});
      componentState2.update({"cart": input.cart, "categories": input.categories, "currency": input.currency});
      currentInput = input;
    }
  };
}
export type CounterInput = { clickHandler: (this: GlobalEventHandlers, ev: MouseEvent) => any, count: number };
export function Counter(input: CounterInput): ViewState<CounterInput> {
  const node0 = t(numberToString(input.count));
  const node1 = h("button", {"className": "px-8 py-4", "onclick": input.clickHandler}, [t("Clicked "), node0, t(" times")], {"testid": "counter-button"});
  const root = h("div", {}, [h("h1", {"className": "p-4"}, [t("Counter Example")]), h("div", {"className": "p-4"}, [node1])], {"testid": "counter-app"});
  let currentInput = input;
  return {
    root,
    update(input) {
      if (input.clickHandler !== currentInput.clickHandler) {
        node1["onclick"] = input.clickHandler;
      }
      if (input.count !== currentInput.count) {
        node0.textContent = numberToString(input.count);
      }
      currentInput = input;
    }
  };
}
export type RootInput = { component: () => Element, setExample: (v0: string) => (this: GlobalEventHandlers, ev: MouseEvent) => any };
export function Root(input: RootInput): ViewState<RootInput> {
  let mountedElement0 = input.component();
  const node0 = h("button", {"className": "w-30 py-2", "onclick": input.setExample(`cafe`)}, [t("Cafe")]);
  const node1 = h("button", {"className": "w-30 py-2", "onclick": input.setExample(`todo`)}, [t("Todo")]);
  const node2 = h("button", {"className": "w-30 py-2", "onclick": input.setExample(`counter`)}, [t("Counter")]);
  const root = h("div", {}, [h("div", {"className": "flex gap-2 bg-blue-50 p-4"}, [node0, node1, node2]), mountedElement0]);
  let currentInput = input;
  return {
    root,
    update(input) {
      if (input.setExample !== currentInput.setExample) {
        node0["onclick"] = input.setExample(`cafe`);
        node1["onclick"] = input.setExample(`todo`);
        node2["onclick"] = input.setExample(`counter`);
      }
      if (input.component !== currentInput.component) {
        const newMountedElement0 = input.component();
        mountedElement0.replaceWith(newMountedElement0);
        mountedElement0 = newMountedElement0;
      }
      currentInput = input;
    }
  };
}
export type TodoInput = { addTodoHandler: (this: GlobalEventHandlers, ev: MouseEvent) => any, completedCount: (v0: { completed: boolean, id: any, text: string }[]) => number, deleteHandler: (v0: any) => (this: GlobalEventHandlers, ev: MouseEvent) => any, handleKeyPress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any, newTodoText: string, todos: { completed: boolean, id: any, text: string }[], toggleHandler: (v0: any) => (this: GlobalEventHandlers, ev: Event) => any, totalCount: (v0: { completed: boolean, id: any, text: string }[]) => number, updateNewTodoText: (this: GlobalEventHandlers, ev: Event) => any };
export function Todo(input: TodoInput): ViewState<TodoInput> {
  const child0: View<any> = (input) => {
    const node0 = h("input", {"checked": input.todo.completed, "className": "w-5 h-5 text-purple-400 accent-purple-400 cursor-pointer", "onchange": input.toggleHandler(input.todo.id), "type": "checkbox"}, []);
    const node1 = t(input.todo.text);
    const node2 = h("button", {"className": "px-4 py-2 bg-red-500 text-white rounded-lg font-medium cursor-pointer transition-all duration-300 hover:bg-red-600 hover:scale-105 active:scale-95", "onclick": input.deleteHandler(input.todo.id), "type": "button"}, [t("Delete")]);
    const root = h("li", {"className": "flex items-center gap-3 px-5 py-4 mb-3 bg-white border-2 border-gray-100 rounded-xl transition-all duration-300 hover:shadow-md hover:-translate-y-0.5 animate-[slideIn_0.4s_ease-in]"}, [node0, h("span", {"className": "flex-1 text-base font-medium"}, [node1]), node2]);
    let currentInput = input;
    return {
      root,
      update(input) {
        if (input.deleteHandler !== currentInput.deleteHandler || input.todo.id !== currentInput.todo.id) {
          node2["onclick"] = input.deleteHandler(input.todo.id);
        }
        if (input.todo.completed !== currentInput.todo.completed) {
          node0["checked"] = input.todo.completed;
        }
        if (input.todo.id !== currentInput.todo.id || input.toggleHandler !== currentInput.toggleHandler) {
          node0["onchange"] = input.toggleHandler(input.todo.id);
        }
        if (input.todo.text !== currentInput.todo.text) {
          node1.textContent = input.todo.text;
        }
        currentInput = input;
      }
    };
  };
  const anchor0 = document.createComment("for-loop-0");
  const loopElements0 = [];
  let childState0: any[] = [];
  for (const item of input.todos) {
    const itemState = child0({ ...input, todo: item });
    loopElements0.push(itemState.root);
    childState0.push(itemState);
  }
  loopElements0.push(anchor0);
  const node0 = h("input", {"className": "grow", "oninput": input.updateNewTodoText, "onkeypress": input.handleKeyPress, "placeholder": "Add a new todo...", "type": "text", "value": input.newTodoText}, [], {"testid": "todo-input"});
  const node1 = h("button", {"className": "px-8 py-4", "onclick": input.addTodoHandler}, [t("Add Todo")], {"testid": "add-todo-btn"});
  const node2 = t(numberToString(input.totalCount(input.todos)));
  const node3 = t(numberToString(input.completedCount(input.todos)));
  const root = h("div", {}, [h("h1", {"className": "p-4"}, [t("Todo Example")]), h("div", {"className": "flex gap-3 mb-8 p-4 items-center"}, [node0, node1]), h("div", {"className": "mb-8 p-4"}, [h("ul", {"className": "p-0 m-0"}, [...loopElements0], {"testid": "todo-list"})]), h("div", {"className": "p-4"}, [h("div", {"className": "flex justify-between gap-4 px-5 py-5 bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl border-2 border-gray-200 min-h-5"}, [h("p", {"className": "m-0 text-base font-semibold text-gray-700"}, [t("Total todos: "), node2], {"testid": "total-count"}), h("p", {"className": "m-0 text-base font-semibold text-gray-700"}, [t("Completed: "), node3], {"testid": "completed-count"})])])], {"testid": "todo-app"});
  let currentInput = input;
  return {
    root,
    update(input) {
      if (input.addTodoHandler !== currentInput.addTodoHandler) {
        node1["onclick"] = input.addTodoHandler;
      }
      if (input.completedCount !== currentInput.completedCount || input.todos !== currentInput.todos) {
        node3.textContent = numberToString(input.completedCount(input.todos));
      }
      if (input.handleKeyPress !== currentInput.handleKeyPress) {
        node0["onkeypress"] = input.handleKeyPress;
      }
      if (input.newTodoText !== currentInput.newTodoText) {
        node0["value"] = input.newTodoText;
      }
      if (input.todos !== currentInput.todos || input.totalCount !== currentInput.totalCount) {
        node2.textContent = numberToString(input.totalCount(input.todos));
      }
      if (input.updateNewTodoText !== currentInput.updateNewTodoText) {
        node0["oninput"] = input.updateNewTodoText;
      }
      childState0 = updateForLoop({
        anchor: anchor0,
        prevStates: childState0,
        nextInputs: input.todos.map((todo: any) => ({ ...input, todo })),
        subView: child0
      });
      currentInput = input;
    }
  };
}
