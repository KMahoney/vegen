name: Checks

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'Cargo.*'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'Cargo.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-checks:
    name: Rust Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        components: rustfmt, clippy
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Upload vegen binary
      uses: actions/upload-artifact@v4
      with:
        name: vegen-binary
        path: target/release/vegen
        retention-days: 1

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: rust-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download vegen binary
      uses: actions/download-artifact@v4
      with:
        name: vegen-binary
        path: target/release

    - name: Make vegen executable
      run: chmod +x target/release/vegen

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: examples/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('examples/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: examples
      run: npm ci

    - name: Generate views.ts from .vg
      run: ./target/release/vegen examples/src/root.vg examples/src/*/*.vg -o examples/src/views.ts

    - name: Get Playwright version
      id: playwright-version
      working-directory: examples
      run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      working-directory: examples
      run: npx playwright install --with-deps chromium

    - name: Run Playwright tests
      working-directory: examples
      run: npx playwright test

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: examples/playwright-report/
        retention-days: 30
